@{
    ViewData["Title"] = "Đặt lại mật khẩu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Stylesheets -->
<link href="~/assets/libs/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" asp-append-version="true" />
<link href="~/assets/css/styles.min.css" rel="stylesheet" asp-append-version="true" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

<!-- Custom CSS -->
<style>
    .reset-password-container {
        max-width: 400px;
        width: 100%;
        padding: 20px;
        border: 1px solid #1E88E5; /* viền xanh coban nhạt */
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .reset-password-title {
        font-size: 1.5rem; 
        font-weight: bold;
        margin-bottom: 1rem;
        color: #004aad; 
        text-align: center;
    }

    .form-floating-label {
        position: relative;
        margin-bottom: 1.5rem;
    }

        .form-floating-label input {
            width: 100%;
            padding: 12px 16px;
            font-size: 1rem;
            border: 1px solid #ddd; /* như login */
            border-radius: 4px;
            background: transparent;
            transition: all 0.2s ease-in-out;
        }

        .form-floating-label label {
            position: absolute;
            top: 50%;
            left: 16px;
            transform: translateY(-50%);
            padding: 0 4px;
            font-size: 1rem;
            color: #aaa;
            pointer-events: none;
            transition: all 0.2s ease-in-out;
        }

        .form-floating-label input:focus {
            border-color: #1E88E5; /* viền focus */
        }

            .form-floating-label input:focus + label,
            .form-floating-label input:not(:placeholder-shown) + label {
                top: -8px;
                transform: translateY(0) scale(0.85);
                background-color: #f9f9f9;
                color: #1E88E5; /* label focus */
            }

    .input-group {
        position: relative;
    }

        .input-group .input-group-text {
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            color: #1E88E5;
        }

            .input-group .input-group-text:hover {
                color: #64B5F6;
            }

    .btn-primary, button[type="submit"] {
        background-color: #004aad; /* xanh coban */
        border-color: #0C2A53;
        color: #fff;
        font-weight: bold;
        padding: 12px;
        width: 100%;
        border-radius: 20px;
        transition: 0.3s;
        font-size: 1rem;
        cursor: pointer;
    }

        .btn-primary:hover,
        button[type="submit"]:hover {
            background-color: #143865; 
            border-color: #143865;
        }

    /* Link quay lại */
    .text-center a {
        color: #1E88E5;
        font-weight: bold;
        text-decoration: none;
        transition: 0.3s;
    }

        .text-center a:hover {
            color: #64B5F6;
            text-decoration: underline;
        }

    /* Giữ reCAPTCHA rộng đầy */
    .g-recaptcha {
        margin-bottom: 1rem;
    }
</style>

<!-- Reset Password Form -->
<div class="d-flex justify-content-center align-items-center mt-5">
    <div class="reset-password-container">
        <h2 class="reset-password-title text-center">Đặt lại mật khẩu</h2>

        @if (ViewData.ModelState[""]?.Errors.Count > 0)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewData.ModelState[""].Errors)
                {
                    <p class="mb-0">@error.ErrorMessage</p>
                }
            </div>
        }

        <form method="post" class="needs-validation" novalidate>

            <input type="hidden" name="token" value="@ViewData["Token"]" />
            @Html.AntiForgeryToken()
            <input type="hidden" name="token" value="@ViewData["Token"]" />

            <div class="form-floating-label input-group">
                <input type="password" id="password" name="password" placeholder=" " required />
                <label for="password">Mật khẩu mới</label>
                <span class="input-group-text" id="togglePassword">
                    <i class="fas fa-eye"></i>
                </span>
                <div class="invalid-feedback">Vui lòng nhập mật khẩu.</div>
            </div>

            <div class="form-floating-label input-group">
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder=" " required />
                <label for="confirmPassword">Xác nhận mật khẩu</label>
                <span class="input-group-text" id="toggleConfirmPassword">
                    <i class="fas fa-eye"></i>
                </span>
            </div>

            <!-- Google reCAPTCHA -->
            <div class="g-recaptcha mb-3" data-sitekey="@ViewBag.SiteKey"></div>

            <button type="submit" class="btn btn-primary w-100">Đặt lại mật khẩu</button>
        </form>

        <div class="text-center mt-3">
            <a href="LoginSV">Quay lại trang đăng nhập</a>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://www.google.com/recaptcha/api.js" async defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>
<script src="~/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js" asp-append-version="true"></script>

<script>
    const togglePassword = document.querySelector('#togglePassword');
    const passwordField = document.querySelector('#password');
    const toggleConfirmPassword = document.querySelector('#toggleConfirmPassword');
    const confirmPasswordField = document.querySelector('#confirmPassword');

    togglePassword.addEventListener('click', () => {
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
        togglePassword.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
    });

    toggleConfirmPassword.addEventListener('click', () => {
        const type = confirmPasswordField.getAttribute('type') === 'password' ? 'text' : 'password';
        confirmPasswordField.setAttribute('type', type);
        toggleConfirmPassword.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
    });

    function validatePassword(password) {
        const regex = /^(?=.*[A-Z])(?=.*\d)[A-Za-z0-9]{8,}$/;
        return regex.test(password) && !/[àáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÿ]/.test(password);
    }

    document.querySelector('form').addEventListener('submit', function (event) {
        const password = passwordField.value;
        const confirmPassword = confirmPasswordField.value;

        if (!validatePassword(password)) {
            event.preventDefault();
            alert('Mật khẩu phải có ít nhất 8 ký tự, bao gồm ít nhất 1 ký tự viết hoa và 1 ký tự số, và không chứa ký tự có dấu hoặc dấu cách.');
            return;
        }

        if (password !== confirmPassword) {
            event.preventDefault();
            alert('Mật khẩu và xác nhận mật khẩu không khớp.');
        }
    });
</script>
